<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gradle.demo.dao.UserMapper" >
    <resultMap id="BaseResultMap" type="gradle.demo.model.User" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="id_number" property="idNumber" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
        <result column="birthday" property="birthday" jdbcType="VARCHAR" />
        <result column="address" property="address" jdbcType="VARCHAR" />
        <result column="college_id" property="collegeId" jdbcType="INTEGER" />
        <result column="type" property="type" jdbcType="INTEGER" />
        <result column="salt" property="salt" jdbcType="VARCHAR" />
        <result column="create_date" property="createDate" jdbcType="VARCHAR" />
        <result column="modify_date" property="modifyDate" jdbcType="VARCHAR" />
        <result column="authority" property="authority" jdbcType="CHAR" />
        <result column="profession" property="profession" jdbcType="VARCHAR" />
        <result column="class_title" property="classTitle" jdbcType="VARCHAR" />
        <result column="join_time" property="joinTime" jdbcType="VARCHAR" />
        <result column="native_place" property="nativePlace" jdbcType="VARCHAR" />
        <result column="ethnic" property="ethnic" jdbcType="VARCHAR" />
        <result column="gender" property="gender" jdbcType="TINYINT" />
        <result column="political" property="political" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="introduction" property="introduction" jdbcType="VARCHAR" />
    </resultMap>
    <sql id="Base_Column_List" >
      id, id_number, password, name, phone, birthday, address, college_id, type, salt,
      create_date, modify_date, authority, profession, class_title, join_time, native_place,
      ethnic, gender, political, email, introduction
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from `user`
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByIdNumber" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        from `user`
        WHERE id_number = #{idNumber, jdbcType=VARCHAR }
        AND type = #{type, jdbcType=INTEGER}
    </select>
    <select id="selectByIdNumbers" resultMap="BaseResultMap">
        <if test="idNumbers != null and idNumbers.size() > 0">
            SELECT
            <include refid="Base_Column_List" />
            FROM `user`
            WHERE id_number in
            <foreach collection="idNumbers" separator="," open="(" index="index" item="idNumber" close=")">
                #{idNumber}
            </foreach>
            and type = #{type, jdbcType=INTEGER}
        </if>
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from `user`
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="gradle.demo.model.User" >
        <selectKey resultType="INTEGER" order="BEFORE" keyProperty="id">
            SELECT gen_id('user') as id
        </selectKey>
        insert into `user` (id, id_number, password,
        name, phone, birthday,
        address, college_id, type,
        salt, create_date,
        profession, class_title,
        join_time, native_place, ethnic,
        gender, political, email,
        introduction)
        values (#{id, jdbcType=INTEGER}, #{idNumber,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{birthday,jdbcType=VARCHAR},
        #{address,jdbcType=VARCHAR}, #{collegeId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER},
        #{salt,jdbcType=VARCHAR}, sysdate() + '0',
        #{profession,jdbcType=VARCHAR}, #{classTitle,jdbcType=VARCHAR},
        #{joinTime,jdbcType=VARCHAR}, #{nativePlace,jdbcType=VARCHAR}, #{ethnic,jdbcType=VARCHAR},
        #{gender,jdbcType=TINYINT}, #{political,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
        #{introduction,jdbcType=VARCHAR})
    </insert>
    <insert id="batchInsert">
        insert into `user` (id, id_number, password,
        name, phone, birthday,
        address, college_id, type,
        salt, create_date, modify_date,
        profession, class_title,
        join_time, native_place, ethnic,
        gender, political, email,
        introduction)
        values
        <foreach collection="list" index="index" separator="," item="item">
            (gen_id('user'), #{item.idNumber,jdbcType=VARCHAR}, #{item.password,jdbcType=VARCHAR},
            #{item.name,jdbcType=VARCHAR}, #{item.phone,jdbcType=VARCHAR}, #{item.birthday,jdbcType=VARCHAR},
            #{item.address,jdbcType=VARCHAR}, #{item.collegeId,jdbcType=INTEGER}, #{item.type,jdbcType=INTEGER},
            #{item.salt,jdbcType=VARCHAR}, sysdate() + '0', NULL ,
            #{item.profession,jdbcType=VARCHAR}, #{item.classTitle,jdbcType=VARCHAR},
            #{item.joinTime,jdbcType=VARCHAR}, #{item.nativePlace,jdbcType=VARCHAR}, #{item.ethnic,jdbcType=VARCHAR},
            #{item.gender,jdbcType=TINYINT}, #{item.political,jdbcType=VARCHAR}, #{item.email,jdbcType=VARCHAR},
            #{item.introduction,jdbcType=VARCHAR})
        </foreach>
        ON DUPLICATE KEY UPDATE
        modify_date = sysdate() + '0'
    </insert>
    <update id="updateByPrimaryKey" parameterType="gradle.demo.model.User" >
      update user
      set id_number = #{idNumber,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      college_id = #{collegeId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      salt = #{salt,jdbcType=VARCHAR},
      modify_date = sysdate() + '0',
      authority = #{authority,jdbcType=CHAR},
      profession = #{profession,jdbcType=VARCHAR},
      class_title = #{classTitle,jdbcType=VARCHAR},
      join_time = #{joinTime,jdbcType=VARCHAR},
      native_place = #{nativePlace,jdbcType=VARCHAR},
      ethnic = #{ethnic,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=TINYINT},
      political = #{political,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByType" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from `user`
        where type = #{type,jdbcType=INTEGER}
    </select>
    <select id="selectTeachers" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from `user`
        where (type = 0 or type = 1) <if test="name != null" >AND name LIKE CONCAT('%', #{name,jdbcType=VARCHAR}, '%')</if>
        ORDER BY id_number
        LIMIT #{offset},#{limit}
    </select>
    <select id="selectAllCountByType" resultType="int">
        SELECT count(*) FROM `user`
        <if test="type != null">
            where
            <if test="type != 2">
                type = 0 OR type = 1
            </if>
            <if test="type == 2">
                type = 2
            </if>
        </if>
    </select>
    <select id="selectByPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `user`
        <if test="type != null">
            WHERE
            <if test="type != 2">
                type = 0 OR type = 1
            </if>
            <if test="type == 2">
                type = 2
            </if>
        </if>
        ORDER BY id_number
        <if test="offset != 0 and limit != 0">
            limit #{offset}, #{limit}
        </if>
    </select>
    <delete id="deleteByIdNumber" parameterType="java.lang.String" >
        delete from `user`
        where id_number = #{idNumber,jdbcType=VARCHAR}
    </delete>
    <update id="updateUser" parameterType="gradle.demo.model.User" >
        update user
        <set >
            <if test="password != null" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="phone != null" >
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="birthday != null" >
                birthday = #{birthday,jdbcType=VARCHAR},
            </if>
            <if test="address != null" >
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="collegeId != null" >
                college_id = #{collegeId,jdbcType=INTEGER},
            </if>
            <if test="type != null" >
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="salt != null" >
                salt = #{salt,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null" >
                create_date = #{createDate,jdbcType=VARCHAR},
            </if>
            <if test="modifyDate != null" >
                modify_date = #{modifyDate,jdbcType=VARCHAR},
            </if>
            <if test="authority != null" >
                authority = #{authority,jdbcType=CHAR},
            </if>
        </set>
        where id_number = #{idNumber,jdbcType=VARCHAR}
    </update>

    <update id="updateAuth">
        UPDATE `user`
        SET
        authority = #{auth,jdbcType=CHAR},
        type = #{type, jdbcType=INTEGER}
        where id = #{userId, jdbcType=INTEGER}
    </update>
</mapper>