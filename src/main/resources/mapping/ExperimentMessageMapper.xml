<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gradle.demo.dao.ExperimentMessageMapper">
    <resultMap id="BaseResultMap" type="gradle.demo.model.ExperimentMessage">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="to_id" property="toId" jdbcType="INTEGER"/>
        <result column="from_id" property="fromId" jdbcType="INTEGER"/>
        <result column="ep_id" property="courseId" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="created_date" property="createdDate" jdbcType="INTEGER"/>
        <result column="has_read" property="hasRead" jdbcType="INTEGER"/>
        <result column="conversation_id" property="conversationId" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="table">message</sql>
    <sql id="selectFields">id, from_id, to_id,ep_id, title,content,created_date,has_read, conversation_id
  </sql>
    <sql id="insertFields">from_id , to_id, ep_id,title, content, has_read, created_date, conversation_id </sql>
    <select id="getConversitionDetail" resultType="gradle.demo.model.ExperimentMessage">
        SELECT
        <include refid="selectFields"/>
        FROM
        <include refid="table"/>
        WHERE conversation_id = #{conversationId}
        ORDER BY created_date DESC
        LIMIT #{offset},#{limit}
    </select>

    <insert id="addMessage" parameterType="gradle.demo.model.ExperimentMessage">
        INSERT INTO
        message
        (<include refid="insertFields"/>)
        VALUES
        (#{fromId},#{toId},#{courseId},#{title},#{content},#{hasRead},#{createdDate},#{conversationId})
    </insert>

    <insert id="batchInsert">
        INSERT INTO
        `message`
        (<include refid="insertFields"/>)
        VALUES
        <foreach collection="list" separator="," index="index" item="item">
            (#{item.fromId},#{item.toId},#{item.courseId},#{item.title},#{item.content},
            #{item.hasRead},#{item.createdDate},#{item.conversationId})
        </foreach>
    </insert>

    <select id="getConversitionList" parameterType="java.lang.Integer" resultType="gradle.demo.model.ExperimentMessage">
        SELECT
        <include refid="insertFields"/>, COUNT (id) as id
        FROM
        ( SELECT * FROM message
        WHERE
        from_id=#{userId} or to_id=#{userId}
        order by created_date desc
        ) tt
        group by conversation_id order by created_date desc limit #{offset}, #{limit}
    </select>


    <select id="getCommentCount" parameterType="java.lang.Integer">
    SELECT COUNT (id)
    FROM
    message
    WHERE
    entity_type = #{entityType} and entity_id = #{entityId}
  </select>

    <select id="getUnreadCount" parameterType="java.lang.Integer">
    SELECT COUNT (id)
    FROM
    message
    WHERE
    has_read=0 and to_id=#{userId} and conversation_id=#{conversationId}
  </select>

    <update id="updateStatus" parameterType="java.lang.Integer">
    UPDATE message
    SET has_read = #{status} where id = #{id}
  </update>

    <select id="getReceiveMessageList" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM
        <include refid="table"/>
        WHERE to_id = #{toId}
        <if test="hasRead != 2">
            AND has_read = #{hasRead}
        </if>
        ORDER BY created_date DESC
        LIMIT #{offset},#{limit}
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM
        <include refid="table"/>
        where id = #{id}
    </select>
</mapper>